package rmiclient.inventorymanager;

import common.IRmiApi;
import common.pojo.Product;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.List;

/**
 * ****************************************************************************
 * File:NewJFrame.java Course: 17655 Project: Assignment 2 Copyright: Copyright
 * (c) 2014 Carnegie Mellon University Versions: 1.0 January 2014 - Modification
 * to assignment 2 (ajl).
 *
 * This class defines a GUI application that allows inventory to be added,
 * deleted, and inventory counts to be decremented from theleaftech database.
 * There are four tables in the leaftech database: cultureboxes, genomics,
 * processing, and referencematerials.
 *
 *****************************************************************************
 */
/*
 * AddInventoryMainFrame.java
 *
 * Created on Jan 20, 2014, 11:24:23 PM
 */
/**
 *
 * @author lattanze
 */
public class InventoryManager extends javax.swing.JFrame {

    String versionID = "V1.2";
    String rbutton_error_msg = "\nMust select a category radio button.";
    String description_error_msg = "Must enter a product description.";
    String productid_error_msg = "Must enter a product ID.";
    String price_error_msg = "Must enter a product price.";
    String quantity_error_msg = "Must enter a product quantity.";

    String msgString1 = "\n>> Establishing Driver...";
    String msgString2 = "\n>> Setting up URL...";
    String msgString3 = "\n>> Establishing connection with: "; //+ sourceURL
    private final IRmiApi api;
    private final String token;

    /**
     * Creates new form AddInventoryMainFrame
     *
     * @param comp
     * @param token
     */
    public InventoryManager(IRmiApi comp, String token) {

        this.api = comp;
        this.token = token;

        initComponents();
        jLabel1.setText("LeafTech Inventory Management Application " + versionID);

        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButton1.setText("Culture Boxes");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("Processing");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setText("Genomics");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Leaf Tech Inventory Management System");

        jLabel2.setText("Product ID");

        jLabel3.setText("Retail Price Each");

        jLabel4.setText("Quantity");

        jButton1.setText("Add");
        jButton1.setActionCommand("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Product Description");

        jButton2.setText("List Table Contents");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jRadioButton4.setText("Reference Materials");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Add Item to database: Select a category above, Enter info below, Press Add to add to inventory.");

        jLabel8.setText("Edit Inventory (note that negative inventory counts indicate backorders)");

        jLabel9.setText("Database and Table");

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setText("(select item below and click to delete)");

        jLabel11.setText("(select table above and click)");

        jButton4.setText("Decrement");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel12.setText("(select item and click to decrement inventory by 1)");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jRadioButton5.setText("Seeds");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jRadioButton6.setText("Shrubs");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jRadioButton7.setText("Trees");
        jRadioButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(44, 44, 44)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel6))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton5)
                                            .addComponent(jRadioButton7)
                                            .addComponent(jRadioButton6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton1)
                                            .addComponent(jRadioButton2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton4)
                                            .addComponent(jRadioButton3)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(83, 83, 83)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton4)
                            .addComponent(jRadioButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(3, 3, 3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jRadioButton1.setSelected(true);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(true);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(true);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(true);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Add item to inventory
        String description;             // Inventory item description
        Integer quantity;               // Quantity of trees, seeds, or shrubs
        Float perUnitCost;              // Cost per tree, seed, or shrub unit
        String productID = null;        // Product id of tree, seed, or shrub
        String errString = null;        // String for displaying errors
        String tableSelected = null;    // String used to determine which data table to use        

        jTextArea1.setText("");

        int but_sel = checkradiobuttons();

        if (but_sel == 0 || checkfields()) {
            return;
        }
 
        try {
            // get the data from the text fields
            description = jTextField5.getText();
            productID = jTextField2.getText();
            quantity = Integer.parseInt(jTextField4.getText());
            perUnitCost = Float.parseFloat(jTextField3.getText());

            switch (but_sel) {
                // if culture boxes are selected then insert inventory into cultureboxes 
                // table
                case 1:
                    tableSelected = "CULTURE BOXES";
                    api.insertCultureBoxes(productID, quantity, description, perUnitCost);
                    break;
                // if processing equipment is selected then insert inventory into strubs
                // table
                case 2:
                    tableSelected = "PROCESSING";
                    api.insertProcessing(productID, quantity, description, perUnitCost);
                    break;
                // if genomics are selected then insert inventory into the genomics
                // table
                case 3:
                    tableSelected = "GENOMICS";
                    api.insertGenomics(productID, quantity, description, perUnitCost);
                    break;
                // if reference materials are selected then insert inventory into referencematerials
                // table
                case 4:
                    tableSelected = "REFERENCE MATERIALS";
                    api.insertReferenceMaterials(productID, quantity, description, perUnitCost);
                    break;
                // if seeds are selected then insert inventory into referencematerials
                // table
                case 5:
                    tableSelected = "SEEDS";
                    api.insertSeeds(productID, quantity, description, perUnitCost);
                    break;
                // if shrubs are selected then insert inventory into referencematerials
                // table
                case 6:
                    tableSelected = "SHRUBS";
                    api.insertShrubs(productID, quantity, description, perUnitCost);
                    break;
                // if trees are selected then insert inventory into referencematerials
                // table
                case 7:
                    tableSelected = "TREES";
                    api.insertCultureBoxes(productID, quantity, description, perUnitCost);
                    break;
                default:
                    break;
            }

            // let the user know all went well                
            jTextArea1.setText("");
            jTextArea1.append("\nINVENTORY UPDATED... The following was added to " + tableSelected + "...\n");
            jTextArea1.append("\n DESCRIPTION:: " + description);
            jTextArea1.append("\n QUANTITITY::  " + quantity);
            jTextArea1.append("\n UNIT COST::   " + perUnitCost);
        } catch (Exception e) {
            errString = "\nProblem with insert:: " + e;
            jTextArea1.append(errString);
        } // try
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // This button will list the inventory for the product selected by the
        // radio button
        List<Product> res = null;       // API reques result set pointer
        String tableSelected = null;    // String used to determine which data table to use
        String errString = null;        // String for displaying errors
        String msgString = null;        // String for displaying non-error messages
        // Check to make sure a radio button is selected
        int but_sel = checkradiobuttons();

        if (but_sel == 0) {
            return;
        }

        //Now, we try to connect to the inventory database.
        //Clear the fields - they are not needed and may cause confusion
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextArea1.setText("");

        //Form the SQL statement and then execute it.
        try {
            // now we build a query to list the inventory table contents
            // for the user
            switch (but_sel) {
                // ... here is the SQL for culture boxes
                case 1:
                    tableSelected = "CULTURE BOXES";
                    res = api.getCultureBoxes();
                    break;
                // ... here is the SQL for processing
                case 2:
                    tableSelected = "PROCESSING";
                    res = api.getProcessing();
                    break;
                // ... here is the SQL for genomics
                case 3:
                    tableSelected = "GENOMICS";
                    res = api.getGenomics();
                    break;
                // if reference materials are selected then insert inventory into referencematerials
                // table
                case 4:
                    tableSelected = "REFERENCE MATERIALS";
                    res = api.getReferenceMaterials();
                    break;
                // if seeds are selected then insert inventory into referencematerials
                // table
                case 5:
                    tableSelected = "SEEDS";
                    res = api.getSeeds();
                    break;
                // if shrubs are selected then insert inventory into referencematerials
                // table
                case 6:
                    tableSelected = "SHRUBS";
                    res = api.getShrubs();
                    break;
                // if trees are selected then insert inventory into referencematerials
                // table
                case 7:
                    tableSelected = "TREES";
                    res = api.getTrees();
                    break;
                default:
                    break;
            }

            // Now we list the inventory for the selected table            
            for (Product p : res) {
                msgString = tableSelected + ">>" + p.getProductCode() + "::" + 
                        p.getDescription() + " :: " + p.getPrice() + "::" + 
                        p.getQuantity();
                jTextArea1.append(msgString + "\n");
            } // for

        } catch (Exception e) {
            errString = "\nProblem with " + tableSelected + " query:: " + e;
            jTextArea1.append(errString);
        } // try
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        // This button deletes the item from the database highlighed by the user
        String productID = null;            // Product ID pnemonic
        Boolean IndexNotFound;              // Flag indicating a string index was not found.
        Boolean connectError = false;       // Error flag
        Connection DBConn = null;           // MySQL connection handle
        String errString = null;            // String for displaying errors
        int executeUpdateVal;               // Return value from execute indicating effected rows
        java.sql.Statement s = null;        // SQL statement pointer
        String SQLstatement = null;         // String for building SQL queries
        IndexNotFound = false;              // Flag indicating that a string index was not found

        // Blank string check
        productID = checkselection();
        // Rediobutton selection check
        int but_sel = checkradiobuttons();

        if (productID == null) {
            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");
            return;
        }
        
        jTextArea1.setText("");
        jTextArea1.append("Deleting ProductID: " + productID);
        jTextArea1.append(msgString3);

        //If there is no connection error, then we form the SQL statement
        //to delete the inventory item and then execute it.
        try {
            switch (but_sel) {
                // if culture boxes inventory selected
                case 1:
                    api.deleteCultureBoxes(productID);
                    break;
                // if processing equipment inventory selected
                case 2:
                    api.deleteProcessing(productID);
                    break;
                // if genomics inventory selected
                case 3:
                    api.deleteGenomics(productID);
                    break;
                // if reference materials  inventory selected
                case 4:
                    api.deleteReferenceMaterials(productID);
                    break;
                // if seeds inventory selected
                case 5:
                    api.deleteSeeds(productID);
                    break;
                // if shrubs inventory selected
                case 6:
                    api.deleteShrubs(productID);
                    break;
                // if trees inventory selected
                case 7:
                    api.deleteTrees(productID);
                    break;
                default:
                    break;
            }

            // let the user know all went well
            jTextArea1.append("\n\n" + productID + " deleted...");
            //jTextArea1.append("\n Number of items deleted: " + executeUpdateVal );
        } catch (Exception e) {
            errString = "\nProblem with delete:: " + e;
            jTextArea1.append(errString);
        } // try
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // This button decrements the inventory count in the database of the item highlighed by the user
        String productID = null;            // Product ID pnemonic
        String errString = null;            // String for displaying errors
        int executeUpdateVal;               // Return value from execute indicating effected rows
        String msgString = null;            // String for displaying non-error messages
        String tableSelected = null;        // String used to determine which data table to use
        List<Product> res = null;       // API reques result set pointer

        // make sure the selection is not blank
        productID = checkselection();
        // Rediobutton selection check
        int but_sel = checkradiobuttons();

        if (productID == null) {
            jTextArea1.setText("");
            jTextArea1.append("\nNo items selected...\nSELECT ENTIRE INVENTORY LINE TO ADD ITEM TO ORDER\n(TRIPLE CLICK ITEM LINE)");
            return;
        }

        // Now we decrement the inventory count of item indicated by the productID we
        // parsed out above from the indicated table.        
        jTextArea1.setText("");
        jTextArea1.append("Deleting ProductID: " + productID);

        //If there is no connection error, then we form the SQL statement
        //to decrement the inventory item count and then execute it.        
        try {
            switch (but_sel) {
                // if culture boxes inventory selected
                case 1:
                    res = api.decrementShrubs(productID);
                    break;
                // if processing equipment inventory selected
                case 2:
                    res = api.decrementProcessing(productID);
                    break;
                // if genomics inventory selected
                case 3:
                    res = api.decrementGenomics(productID);
                    break;
                // if reference materials  inventory selected
                case 4:
                    res = api.decrementReferenceMaterials(productID);
                    break;
                // if seeds inventory selected
                case 5:
                    res = api.decrementSeeds(productID);
                    break;
                // if shrubs inventory selected
                case 6:
                    res = api.decrementShrubs(productID);
                    break;
                // if trees inventory selected
                case 7:
                    res = api.decrementTrees(productID);
                    break;
                default:
                    break;
            }

            // display result for the user
            // let the user know all went well
            jTextArea1.append("\n\n" + productID + " inventory decremented...");            
            // Now we list the inventory for the selected table            
            for (Product p : res) {
                msgString = tableSelected + ">>" + p.getProductCode() + "::" + 
                        p.getDescription() + " :: " + p.getPrice() + "::" + 
                        p.getQuantity();
                jTextArea1.append(msgString + "\n");
            } // for


            //jTextArea1.append("\n\n Number of items updated: " + executeUpdateVal );
        } catch (Exception e) {
            errString = "\nProblem with delete:: " + e;
            jTextArea1.append(errString);
        } // try
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(true);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(false);
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton7ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(false);
        jRadioButton7.setSelected(true);// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton7ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        jRadioButton5.setSelected(false);
        jRadioButton6.setSelected(true);
        jRadioButton7.setSelected(false);
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    int checkradiobuttons() {
        // Check to make sure a radio button is selected   
        if (jRadioButton1.isSelected()) {
            return 1;
        }
        if (jRadioButton2.isSelected()) {
            return 2;
        }
        if (jRadioButton3.isSelected()) {
            return 3;
        }
        if (jRadioButton4.isSelected()) {
            return 4;
        }
        if (jRadioButton5.isSelected()) {
            return 5;
        }
        if (jRadioButton6.isSelected()) {
            return 6;
        }
        if (jRadioButton7.isSelected()) {
            return 7;
        }

        jTextArea1.append(rbutton_error_msg);
        return 0;
    }

    Boolean checkfields() {
        //Make sure there is a product ID
        if (jTextField2.getText().length() == 0) {
            jTextArea1.append(productid_error_msg);
            return false;
        } // product ID

        //Make sure there is a price
        if (jTextField3.getText().length() == 0) {
            jTextArea1.append(price_error_msg);
            return false;
        } // price

        //Make sure there is a quantity
        if (jTextField4.getText().length() == 0) {
            jTextArea1.append(quantity_error_msg);
            return false;
        } // quantity

        //Make sure there is a product description
        if (jTextField5.getText().length() == 0) {
            jTextArea1.append(description_error_msg);
            return false;
        } //product description

        return true;
    }

    String checkselection() {
        // this is the selected line of text
        // make sure the selection is not blank
        String inventorySelection = null;
        int beginIndex = 0;
        int endIndex = 0;
        inventorySelection = jTextArea1.getSelectedText();
        if (inventorySelection == null) {
            return null;
        }
        // get the product ID - here we get the leading index

        endIndex = inventorySelection.indexOf(">>", beginIndex);

        if (endIndex < 0) {
            return null;
        }

        beginIndex = endIndex + 2; //skip past ">>"   

        // Here we get the trailing index and parse out the productID
        endIndex = inventorySelection.indexOf(":", beginIndex);
        if (endIndex >= 0) {
            return inventorySelection.substring(beginIndex, endIndex);
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
